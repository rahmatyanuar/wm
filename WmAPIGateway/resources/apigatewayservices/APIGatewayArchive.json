{
  "swagger" : "2.0",
  "info" : {
    "description" : "The API Gateway archive service exposes the interface to the API Gateway export archives. An API Gateway export archive is a ZIP file that contains APIs, policies, global policies, users, groups, access profiles, aliases, keystores, trustores, ports, JMS connections, JMS providers, JMS triggers, service registries, various administrative configurations like approval configurations, keystore/trustore configurations, cache configurations, log configurations, LDAP configurations, user account settings and all the other assets in API Gateway. You can use this service to export/import all type of assets into API Gateway. \n\n In general, for any asset being exported, all the dependent assets are automatically exported. For example, when exporting APIs,  the export archive contains the APIs, the API level policies, the policy actions associated with the API level policies, and the aliases referenced by the policy actions. Additionally, the archive may also contain the applications registered to the exported APIs.\n When exporting global policy the archive contains the global policies, the policy actions associated with the global policies, and the aliases referenced to the policy actions.\n When exporting approval configuration the archive contains the approval configuration and the access profile associated with the approval configuration. \n When exporting port the archive contains the port, the keystore and trustore associated with the port. \n When exporting LDAP configuration the archive contains the LDAP configuration, the group associated with the LDAP configuration. \n\nEach artifact in an archive is associated with a universally unique identifier (UUID) across all API Gateway installations. When importing an archive, the UUID helps in determining whether the corresponding artifact is already available in API Gateway. In such a situation, you can specify whether to overwrite an already existing artifact during the import process. \n\n Any user with the 'Export assets' functional privilege can export  archives in API Gateway and any user with the 'Import assets' privilege can import the archives. By default, the users who are part of API-Gateway-Administrators group will have these privileges.",
    "version" : "10.11",
    "title" : "API Gateway Archive Service"
  },
  "host" : "localhost:5555",
  "basePath" : "/rest/apigateway",
  "schemes" : [ "http" ],
  "consumes" : [ "application/json", "application/zip" ],
  "produces" : [ "application/json", "application/zip" ],
  "paths" : {
    "/archive" : {
      "get" : {
        "description" : "The GET method exports an archive. The result of the GET request is an archive in a ZIP format. \n This Method supports exporting API, Application, Alias,Policy, Policy Action, Keystore, Truststore, Kerberos, User, Group, Team, JMS Connection, JNDI Provider, JMS Trigger, Webservice Endpoint Alias, Approval Configuration, Outbound Proxy, URL alias, Plan and Package. \n This GET method can be used for exporting specific type of assets and its optional/soft dependant assets by specifying the asset name and corresponding include options in query parameter. \n For example, for an API, the Application assets (used by the API) are soft dependant of that API. To export the dependant applications of an API use the query param 'include-applications'.If 'include-applications' is not provided, the export archive will contains only the APIs. \n Refer 'Parameters' section for the usage of each include parameters.\n\n\n Use the POST /archive method to export all the assets in API Gateway.",
        "operationId" : "exportApiGatewayAssets",
        "consumes" : [ "application/json" ],
        "produces" : [ "multipart/form-data" ],
        "parameters" : [ {
          "name" : "include-applications",
          "in" : "query",
          "description" : "This parameter indicates whether you want to export the applications associated with the\nAPIs",
          "required" : false,
          "type" : "string",
          "x-example" : "include-applications=true"
        }, {
          "name" : "include-users",
          "in" : "query",
          "description" : "This parameter indicates whether you want to export users associated with the groups and/or with the password expiry settings",
          "required" : false,
          "type" : "string",
          "x-example" : "include-users=true"
        }, {
          "name" : "include-groups",
          "in" : "query",
          "description" : "This parameter indicates whether you want to export groups associated with the teams",
          "required" : false,
          "type" : "string",
          "x-example" : "include-groups=true"
        }, {
          "name" : "include-truststores",
          "in" : "query",
          "description" : "This parameter indicates whether you want to export truststore alias associated with the email configuration",
          "required" : false,
          "type" : "string",
          "x-example" : "include-truststores=true"
        }, {
          "name" : "policies",
          "in" : "query",
          "description" : "This parameter identifies the policies to be exported. The wildcard \"*\" selects all the policies. \nFor example a single policy can be exported with its id using the following request:\nGET /rest/apigateway/archive?policies=07b8d7b7-20b7-422e-8464-4b19d405c41a\n\nWhereas, all the policies can be exported using the following request:\nGET /rest/apigateway/archive?policies=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "policies=07b8d7b7-20b7-422e-8464-4b19d405c41a"
        }, {
          "name" : "apis",
          "in" : "query",
          "description" : "This parameter identifies the APIs to be exported. The wildcard \"*\" selects all the APIs. \nFor example a single API can be exported using the following request:\nGET /rest/apigateway/archive?apis=e2996867-af49-4ac6-98e7-cba48837c13e\n\nWhereas, all the APIs can be exported using the following request:\nGET /rest/apigateway/archive?apis=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "apis=e2996867-af49-4ac6-98e7-cba48837c13e"
        }, {
          "name" : "aliases",
          "in" : "query",
          "description" : "This parameter identifies the aliases to be exported. \nThe wildcard \"*\" selects all aliases.\nFor example, a single alias can be exported using the following requrest:\nGET /rest/apigateway/archive?aliases=d1885756-9e38-39b5-87d6-ba937726b02d\n\nWhereas, all the APIs can be exported using the following request:\nGET /rest/apigateway/archive?alias=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "aliases=d1885756-9e38-39b5-87d6-ba937726b02d"
        }, {
          "name" : "applications",
          "in" : "query",
          "description" : "This parameter identifies the applications to be exported. \nThe wildcard \"*\" selects all applications.\nFor example, a single application can be exported using the following requrest:\nGET /rest/apigateway/archive?applications=d1885756-9e38-39b5-87d6-ba937726b02d\n\nWhereas, all the applications can be exported using the following request:\nGET /rest/apigateway/archive?applications=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "applications=d1885756-9e38-39b5-87d6-ba937726b02d"
        }, {
          "name" : "policyActions",
          "in" : "query",
          "description" : "This parameter identifies the policy actions to be exported. \nThe wildcard \"*\" selects all policy actions.\nFor example, a single policy action can be exported using the following request:\n GET /rest/apigateway/archive?policyActions=20ca1e24-d6b2-430d-adf8-7a53a6cbaa53\n\nWhereas, all the policy actions can be exported using the following request:\nGET /rest/apigateway/archive?policyActions=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "policyActions=20ca1e24-d6b2-430d-adf8-7a53a6cbaa53,c98805c4-9c05-47c0-84f0-c0855c0a9032"
        }, {
          "name" : "approvalConfigurations",
          "in" : "query",
          "description" : "This parameter identifies the approval configurations to be exported. \nThe wildcard \"*\" selects all approval configurations.\nFor example, a single approval configuration can be exported using the following request:\nGET /rest/apigateway/archive?approvalConfigurations=createApplication\n\nWhereas, all the approval configurations can be exported using the following request:\n GET /rest/apigateway/archive?approvalConfigurations=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "createApplication", "updateApplication", "registerApplication", "subscribePackage" ]
          },
          "collectionFormat" : "multi",
          "x-example" : "approvalConfigurations=createApplication"
        }, {
          "name" : "outboundProxies",
          "in" : "query",
          "description" : "This parameter identifies the outbound proxy aliases to be exported. outbound proxy aliases are idetified with it's name.\nThe wildcard \"*\" selects all the outbound proxy aliases. \nFor example a single outbound proxy alias can be exported using the following request:\nGET /rest/apigateway/archive?outboundProxies=testOutboundProxyAlias\n\nWhereas, all the outbound proxy aliases can be exported using the following request:\nGET /rest/apigateway/archive?outboundProxies=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "outboundProxies=testOutboundProxyAlias"
        }, {
          "name" : "urlAliases",
          "in" : "query",
          "description" : "This parameter identifies the URL aliases to be exported. URL aliases are idetified with it's name.\nThe wildcard \"*\" selects all the URL aliases. \nFor example, a single URL alias can be exported using the following request:\nGET /rest/apigateway/archive?urlAliases=testUrlAlias\n\nWhereas, all the URL aliases can be exported using the following request:\nGET /rest/apigateway/archive?testUrlAlias=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "urlAliases=testUrlAlias"
        }, {
          "name" : "keyStores",
          "in" : "query",
          "description" : "This parameter identifies the keystore aliases to be exported. Keystore aliases are idetified with it's name.\nThe wildcard \"*\" selects all the keystore aliases. \nFor example, a single keystore alias can be exported using the following request:\nGET /rest/apigateway/archive?keyStores=test_keystore\n\nWhereas, all the keystore aliases can be exported using the following request:\nGET /rest/apigateway/archive?keyStores=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "keyStores=test_keystore"
        }, {
          "name" : "trustStores",
          "in" : "query",
          "description" : "This parameter identifies the truststore aliases to be exported. Truststore aliases are idetified with it's name.\nThe wildcard \"*\" selects all the truststore aliases. \nFor example, a single truststore alias can be exported using the following request:\nGET /rest/apigateway/archive?trustStores=test_truststore\n\nWhereas, all the truststore aliases can be exported using the following request:\nGET /rest/apigateway/archive?trustStores=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "trustStores=test_truststore"
        }, {
          "name" : "JNDIProviderAliases",
          "in" : "query",
          "description" : "This parameter identifies the JNDI provider aliases to be exported. JNDI provider aliases are idetified with it's name.\nThe wildcard \"*\" selects all the JNDI provider aliases. \nFor example, a single JNDI provider alias can be exported using the following request:\nGET /rest/apigateway/archive?JNDIProviderAliases=test_jndiProviderAlias\n\nWhereas, all the JNDI provider aliases can be exported using the following request:\nGET /rest/apigateway/archive?JNDIProviderAliases=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "JNDIProviderAliases=test_jndiProviderAlias"
        }, {
          "name" : "JMSConnectionAliases",
          "in" : "query",
          "description" : "This parameter identifies the JMS connection aliases to be exported. JMS connection aliases are idetified with it's name.\nThe wildcard \"*\" selects all the JNDI provider aliases. \nFor example, a single JNDI provider alias can be exported using the following request:\nGET /rest/apigateway/archive?JMSConnectionAliases=test_jmsConnectionAlias\n\nWhereas, all the JMS connection aliases can be exported using the following request:\nGET /rest/apigateway/archive?JMSConnectionAliases=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "JMSConnectionAliases=test_jmsConnectionAlias"
        }, {
          "name" : "JMSTriggers",
          "in" : "query",
          "description" : "This parameter identifies the JMS triggers to be exported. JMS triggers are idetified with it's name.\nThe wildcard \"*\" selects all the JMS triggers. \nFor example, a single JMS trigger can be exported using the following request:\nGET /rest/apigateway/archive?JMSTriggers=test_jmsTrigger\n\nWhereas, all the JMS triggers can be exported using the following request:\nGET /rest/apigateway/archive?JMSTriggers=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "JMSTriggers=test_jmsTrigger"
        }, {
          "name" : "webserviceEndpointAliases",
          "in" : "query",
          "description" : "This parameter identifies the 'web service endpoint' aliases to be exported. Web service endpoint aliases are idetified with it's name.\nThe wildcard \"*\" selects all the web service endpoint aliases. \nFor example, a single web service endpoint alias can be exported using the following request:\nGET /rest/apigateway/archive?webserviceEndpointAliases=test_wsEndpointAlias\n\nWhereas, all the JMS triggers can be exported using the following request:\nGET /rest/apigateway/archive?webserviceEndpointAliases=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "webserviceEndpointAliases=test_wsEndpointAlias"
        }, {
          "name" : "users",
          "in" : "query",
          "description" : "This parameter identifies the users to be exported. \nThe wildcard \"*\" selects all the users. \nFor example, a single user can be exported using the following request:\nGET /rest/apigateway/archive?users=7a6d3d40-44d8-4ab1-83df-5be63cdbae54\n\nWhereas, all the users can be exported using the following request:\nGET /rest/apigateway/archive?users=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "users=7a6d3d40-44d8-4ab1-83df-5be63cdbae54"
        }, {
          "name" : "groups",
          "in" : "query",
          "description" : "This parameter identifies the groups to be exported. \nThe wildcard \"*\" selects all the groups. \nFor example, a single group can be exported using the following request:\nGET /rest/apigateway/archive?groups=d6b38ff8-59a8-47bf-9fba-0bdb24ee5b48\n\nWhereas, all the groups can be exported using the following request:\nGET /rest/apigateway/archive?groups=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "groups=d6b38ff8-59a8-47bf-9fba-0bdb24ee5b48"
        }, {
          "name" : "accessProfiles",
          "in" : "query",
          "description" : "This parameter identifies the teams to be exported. \nThe wildcard \"*\" selects all the teams. \nFor example, a single team can be exported using the following request:\nGET /rest/apigateway/archive?accessProfiles=d6b38ff8-59a8-47bf-9fba-0bdb24ee5b48\n\nWhereas, all the teams can be exported using the following request:\nGET /rest/apigateway/archive?accessProfiles=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "accessProfiles=836fd806-4845-452f-9d7a-7e619e40a70e"
        }, {
          "name" : "kerberosSetting",
          "in" : "query",
          "description" : "This parameter identifies the kerberos configuration to be exported.\nThe kerberos configuration can be exported using the following request:\nGET /rest/apigateway/archive?kerberosSetting=kerberosSetting",
          "required" : false,
          "type" : "string",
          "x-example" : "kerberosSetting=kerberosSetting",
          "enum" : [ "kerberosSetting" ]
        }, {
          "name" : "plans",
          "in" : "query",
          "description" : "This parameter identifies the plans to be exported. \nThe wildcard \"*\" selects all the plans. \nFor example, a single plan can be exported using the following request:\nGET /rest/apigateway/archive?plans=86d58023-be4b-4735-a08f-14e78131ce4a\n\nWhereas, all the plans can be exported using the following request:\nGET /rest/apigateway/archive?plans=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "plans=86d58023-be4b-4735-a08f-14e78131ce4a"
        }, {
          "name" : "packages",
          "in" : "query",
          "description" : "This parameter identifies the packages to be exported. \nThe wildcard \"*\" selects all the packages. \nFor example, a single package can be exported using the following request:\nGET /rest/apigateway/archive?packages=73c93393-1477-4a99-9e44-c9b3e679de0c\n\nWhereas, all the packages can be exported using the following request:\nGET /rest/apigateway/archive?packages=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "packages=73c93393-1477-4a99-9e44-c9b3e679de0c"
        },{
          "name" : "portalGateways",
          "in" : "query",
          "description" : "This parameter identifies the portal configurations to be exported. \nThe wildcard \"*\" selects all portal configurations.\nFor example, a single portal configuration can be exported using the following requrest:\nGET /rest/apigateway/archive?portalGateways=ae196583-d109-4e9e-b593-dd7b984fe8ca\n\nWhereas, all the portal configurations can be exported using the following request:\nGET /rest/apigateway/archive?portalGateways=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "portalGateways=ae196583-d109-4e9e-b593-dd7b984fe8ca"
        }, {
          "name" : "configurations",
          "in" : "query",
          "description" : "This parameter identifies the configurations to be exported. \nThe wildcard \"*\" selects all the configurations. \nFor example, a single configuration can be exported using the following request:\nGET /rest/apigateway/archive?configurations=loadBalancer,customContentTypes\n\nWhereas, all the configurations can be exported using the following request:\nGET /rest/apigateway/archive?configurations=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "loadBalancer", "keystore", "mobileApp", "extended", "samlsso", "misc", "dashboard", "customContentTypes", "errorProcessing", "auditlogDestinationConfig", "gatewayDestinationConfig", "jdbcDestinationConfig", "desDestinationConfig", "elasticsearchDestinationConfig", "snmpDestinationConfig", "emailDestinationConfig", "apiPortalDestinationConfig", "samlIssuer", "logConfig", "passwordRestrictions", "passwordExpiry", "accountLockSettings", "ldapConfig", "settings", "cache", "apiCallBackSettings" ]
          },
          "collectionFormat" : "multi",
          "x-example" : "configurations=loadBalancer,customContentTypes"
        }, {
          "name" : "gatewayScopes",
          "in" : "query",
          "description" : "This parameter identifies the oauth scopes to be exported. \nThe wildcard \"*\" selects all the oauth scopes. \nFor example, a single oauth scope can be exported using the following request:\nGET /rest/apigateway/archive?gatewayScopes=73c93393-1477-4a99-9e44-c9b3e679de0c\n\nWhereas, all the oauth scopes can be exported using the following request:\nGET /rest/apigateway/archive?gatewayScopes=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "gatewayScopes=5f388f25-2a57-46b9-b199-9d58fc02a8c1,c98805c4-9c05-47c0-84f0-c0855c0a9032"
        } ],
        "responses" : {
          "200" : {
            "description" : "This response indicates that the archive is created successfully. The response body is the zipped archive."
          },
          "400" : {
            "description" : "This response indicates that a request is incorrect. This can be due to the API or Policy identifiers that cannot be resolved."
          },
          "401" : {
            "description" : "This response indicates that invalid credentials have been provided for the request."
          },
          "500" : {
            "description" : "This response indicates that the server has encountered an error while exporting API Gateway Asset"
          }
        },
        "security" : [ {
          "Basic" : [ ]
        } ]
      },
      "post" : {
        "description" : "This method can be used for importing the API Gateway archive as well as exporting the assets as an archive. If the request is made with x-HTTP-Method-Override HTTP header with value as GET, then this method will export asset. It will require the body param using which you can specify the filtering criteria and include options for the API Gateway assets that need to be exported. \n\n If the HTTP header is not specified, then this method can be used to import the API Gateway archive. You can control the import settings with overwrite and preserveAssetState query parameters.\n\n Here are some sample payloads for different export scenarios. \n\n 1. Export all API Gateway assets. \n Payload: {} \n\n 2. Export all APIs \n Payload: { \"types\": [\"api\"] } \n\n 3. Export all APIs with registered Application \n Payload: {\r\n\"types\" : [\"api\"],\r\n\"includeOptions\" :{\r\n\"includeApplications\" :false\r\n}\r\n} \n\n 4. Export only APIs with name contains \"API Gateway\" \n Payload: {\r\n\"types\" : [\"api\"],\r\n\"scope\" : [\r\n{\"attributeName\" : \"apiName\",\r\n\"keyword\" : \".*API Gateway.*\"\r\n}],\r\n\"includeOptions\" :{\r\n\"includeApplications\" :false\r\n}\r\n} \n\n 5. Export API with specific ids only \n Payload: {\r\n\"types\" : [\"api\"],\r\n\"scope\" : [\r\n{\"attributeName\" : \"id\",\r\n\"keyword\" : \"1c36033a-ecb6-41ce-ad66-bada5cebe85e|8d505388-5524-4df5-bd3c-62c4bb5f41d0\"\r\n}],\r\n\"includeOptions\" :{\r\n\"includeApplications\" :true\r\n}\r\n} \n\n 6. Export API with name starts with API Gateway and description contains search \n Payload: {\r\n\"types\" : [\"api\"],\r\n\"scope\" : [\r\n{\"attributeName\" : \"apiName\",\r\n\"keyword\" : \"API Gateway.*\"\r\n},\r\n{\r\n\"attributeName\" : \"apiDescription\",\r\n\"keyword\" : \".*search.*\"\r\n}],\r\n\"condition\" : \"and\",\r\n\"includeOptions\" :{\r\n\"includeApplications\" :false\r\n}\r\n} \n\n 7. Export all Policy \n Payload: {\r\n\"types\" : [\"policy\"]\r\n} \n\n 8. Global Policy Alone \n Payload: {\r\n\"types\" : [\"policy\"],\r\n\"scope\":[\r\n{\r\n\"attributeName\" : \"policyScope\",\r\n\"keyword\" : \"GLOBAL\"\r\n}]\r\n} \n\n 9. Export Threat Protection Rule \n Payload: {\r\n\"types\" : [\"policy\"],\r\n\"scope\":[\r\n{\r\n\"attributeName\" : \"policyEnforcements.stageKey\",\r\n\"keyword\" : \"threatProtection\"\r\n}]\r\n} \n\n 10. Export All Policy Actions \n Payload: {\r\n\"types\" : [\"policy_action\"]\r\n} \n\n 11. Export All Threat Protection rules and policy \n Payload: {\r\n\"types\" : [\"policy_action\", \"policy\"],\r\n\"scope\":[\r\n{\r\n\"attributeName\" : \"policyEnforcements.stageKey\",\r\n\"keyword\" : \"threatProtection\"\r\n}, {\r\n\"attributeName\" : \"id\",\r\n\"keyword\" : \"globalipdos|ipdos\"\r\n}],\r\n\"condition\" : \"or\"\r\n} \n\n 12. Export all aliases \n Payload: {\r\n\"types\" : [\"alias\"]\r\n} \n\n 13. Export all applications \n Payload: {\r\n\"types\" : [\"application\"]\r\n} \n\n 14. Export all application with out including associated APIs \n Payload: {\r\n\"types\" : [\"application\"],\r\n\"includeOptions\" : {\r\n\"includeApis\": false\r\n}\r\n} \n\n 15. Export All Assertions \n Payload: {\r\n\"types\" : [\"assertion\"]\r\n} \n\n 16. Export all API Plans \n Payload: {\r\n\"types\" : [\"plan\"]\r\n} \n\n 17. Export all API Packages \n Payload: {\r\n\"types\" : [\"package\"]\r\n} \n\n 18. Export all packages along with subscription but with out the registered Applications for the associated APIs. \n Payload: {\r\n\"types\" : [\"package\"],\r\n\"includeOptions\":{\r\n\"includeApis\" : false,\r\n\"includeApplications\" : false,\r\n\"includeSubscriptions\" : true\r\n}\r\n} \n\n 19. Export all subscriptions \n Payload: {\r\n\"types\" : [\"subscription\"]\r\n} \n\n 20. Export all Administrator Settings \n Payload: {\r\n\"types\" : [\"administrator_setting\"]\r\n} \n\n 21. Export specific Administrator Settings \n Payload: {\r\n\"types\" : [\"administrator_setting\"]\r\n,\r\n\"scope\" : [\r\n{\r\n\"attributeName\": \"configId\",\r\n\"keyword\": \"loadBalancer|gatewayDestinationConfig\"\r\n}\r\n ]\r\n}. Available settings: loadBalancer, keystore, mobileApp, extended, samlsso, misc, dashboard, customContentTypes, errorProcessing, auditlogDestinationConfig, gatewayDestinationConfig, jdbcDestinationConfig, desDestinationConfig, elasticsearchDestinationConfig, snmpDestinationConfig, emailDestinationConfig, apiPortalDestinationConfig, samlIssuer, logConfig, passwordRestrictions, passwordExpiry, accountLockSettings, ldapConfig, settings, cache, apiCallBackSettings \n\n 22. Export all approval configurations \n Payload: {\r\n\"types\" : [\"approval_configuration\"]\r\n} \n\n 23. Export all outbound proxy aliases \n Payload: {\r\n\"types\" : [\"outbound_proxy\"]\r\n} \n\n 24. Export all URL aliases \n Payload: {\r\n\"types\" : [\"url_alias\"]\r\n} \n\n 25. Export all keystore aliases \n Payload: {\r\n\"types\" : [\"keystore\"]\r\n} \n\n 26. Export all truststore aliases \n Payload: {\r\n\"types\" : [\"truststore\"]\r\n} \n\n 27. Export all kerberos settings \n Payload: {\r\n\"types\" : [\"kerberos_setting\"]\r\n} \n\n 28. Export all JNDI provider aliases \n Payload: {\r\n\"types\" : [\"jndi_provider_alias\"]\r\n} \n\n 29. Export all JMS connection aliases \n Payload: {\r\n\"types\" : [\"jms_connection_alias\"]\r\n} \n\n 30. Export all JMS triggers \n Payload: {\r\n\"types\" : [\"jms_trigger\"]\r\n} \n\n 31. Export all web service endpoint aliases \n Payload: {\r\n\"types\" : [\"web_service_endpoint_alias\"]\r\n} \n\n 32. Export all users \n Payload: {\r\n\"types\" : [\"users\"]\r\n} \n\n 33. Export all groups \n Payload: {\r\n\"types\" : [\"groups\"]\r\n} \n\n 34. Export all teams \n Payload: {\r\n\"types\" : [\"accessprofiles\"]\r\n}",
        "operationId" : "importExportAPIGatewayAssets",
        "consumes" : [ "multipart/form-data", "application/json" ],
        "produces" : [ "application/json", "multipart/form-data" ],
        "parameters" : [ {
          "name" : "overwrite",
          "in" : "query",
          "description" : "This parameter specifies the import option to define the artifact types that can be overwritten during import. The parameter enables you to specify overwriting of APIs, policies, policy actions, aliases, applications, configurations, approval configurations, outbound proxies, URL aliases, keyStores, trustStores, JNDI provider aliases, JMS connection aliases, JMS triggers, webservice endpoint aliases, users, groups, teams, kerberos settings, plans and packages.   \nThe wildcard \"*\" enables you to specify all types.\nFor example, the following request enables you to overwrite APIs during import:\nPOST /rest/apigateway/archive?overwrite=apis\nWhereas, overwriting all asset types during import can be specified as follows:\nPOST /rest/apigateway/archive?overwrite=*",
          "required" : false,
          "type" : "string",
          "enum" : [ "apis", "policies", "policyactions", "applications", "aliases", "plans", "packages", "subscriptions", "administrator_settings", "portal_gateway", "assertions", "configurations", "outboundProxies", "urlAliases", "keyStores", "trustStores", "JNDIProviderAliases", "JMSConnectionAliases", "JMSTriggers", "webserviceEndpointAliases", "users", "groups", "accessProfiles", "kerberosSetting", "*" ]
        }, {
          "name" : "fixingMissingVersions",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "true", "false" ]
        }, {
          "name" : "preserveAssetState",
          "in" : "query",
          "description" : "This parameter is used to specify whether the asset state needs to be preserved after importing the assets in to API Gateway. By default this value will be true. If false specified the assets will be imported and wont preserve asset state after importing asset.",
          "required" : false,
          "type" : "string",
          "enum" : [ "true", "false" ]
        }, {
          "name" : "policies",
          "in" : "query",
          "description" : "This parameter identifies the policies to be imported. The wildcard \"*\" selects all the policies. \nFor example a single policy can be imported with its id using the following request:\nPOST /rest/apigateway/archive?policies=07b8d7b7-20b7-422e-8464-4b19d405c41a\n\nWhereas, all the policies can be imported using the following request:\nPOST /rest/apigateway/archive?policies=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "policies=07b8d7b7-20b7-422e-8464-4b19d405c41a"
        }, {
          "name" : "apis",
          "in" : "query",
          "description" : "This parameter identifies the APIs to be imported. The wildcard \"*\" imports all the APIs. \nFor example a single API can be imported using the following request:\nPOST /rest/apigateway/archive?apis=e2996867-af49-4ac6-98e7-cba48837c13e\n\nWhereas, all the APIs from an archive can be imported using the following request:\nPOST /rest/apigateway/archive?apis=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "apis=e2996867-af49-4ac6-98e7-cba48837c13e"
        }, {
          "name" : "aliases",
          "in" : "query",
          "description" : "This parameter identifies the aliases to be imported. \nThe wildcard \"*\" selects all aliases.\nFor example, a single alias can be imported using the following requrest:\nPOST /rest/apigateway/archive?aliases=d1885756-9e38-39b5-87d6-ba937726b02d\n\nWhereas, all the APIs can be imported using the following request:\nPOST /rest/apigateway/archive?alias=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "aliases=d1885756-9e38-39b5-87d6-ba937726b02d"
        }, {
          "name" : "applications",
          "in" : "query",
          "description" : "This parameter identifies the applications to be imported. \nThe wildcard \"*\" selects all applications.\nFor example, a single application can be imported using the following requrest:\nPOST /rest/apigateway/archive?applications=d1885756-9e38-39b5-87d6-ba937726b02d\n\nWhereas, all the applications can be imported using the following request:\nPOST /rest/apigateway/archive?applications=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "applications=d1885756-9e38-39b5-87d6-ba937726b02d"
        }, {
          "name" : "approvalConfigurations",
          "in" : "query",
          "description" : "This parameter identifies the approval configurations to be imported. \nThe wildcard \"*\" selects all approval configurations.\nFor example, a single approval configuration can be imported using the following request:\nPOST /rest/apigateway/archive?approvalConfigurations=createApplication\n\nWhereas, all the approval configurations can be imported using the following request:\n POST /rest/apigateway/archive?approvalConfigurations=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "createApplication", "updateApplication", "registerApplication", "subscribePackage" ]
          },
          "collectionFormat" : "multi",
          "x-example" : "approvalConfigurations=createApplication"
        }, {
          "name" : "outboundProxies",
          "in" : "query",
          "description" : "This parameter identifies the outbound proxy aliases to be imported. outbound proxy aliases are idetified with it's name.\nThe wildcard \"*\" selects all the outbound proxy aliases. \nFor example a single outbound proxy alias can be imported using the following request:\nPOST /rest/apigateway/archive?outboundProxies=testOutboundProxyAlias\n\nWhereas, all the outbound proxy aliases can be imported using the following request:\nPOST /rest/apigateway/archive?outboundProxies=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "outboundProxies=testOutboundProxyAlias"
        }, {
          "name" : "urlAliases",
          "in" : "query",
          "description" : "This parameter identifies the URL aliases to be imported. URL aliases are idetified with it's name.\nThe wildcard \"*\" selects all the URL aliases. \nFor example, a single URL alias can be imported using the following request:\nPOST /rest/apigateway/archive?urlAliases=testUrlAlias\n\nWhereas, all the URL aliases can be imported using the following request:\nPOST /rest/apigateway/archive?testUrlAlias=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "urlAliases=testUrlAlias"
        }, {
          "name" : "keyStores",
          "in" : "query",
          "description" : "This parameter identifies the keystore aliases to be imported. Keystore aliases are idetified with it's name.\nThe wildcard \"*\" selects all the keystore aliases. \nFor example, a single keystore alias can be imported using the following request:\nPOST /rest/apigateway/archive?keyStores=test_keystore\n\nWhereas, all the keystore aliases can be imported using the following request:\nPOST /rest/apigateway/archive?keyStores=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "keyStores=test_keystore"
        }, {
          "name" : "trustStores",
          "in" : "query",
          "description" : "This parameter identifies the truststore aliases to be imported. Truststore aliases are idetified with it's name.\nThe wildcard \"*\" selects all the truststore aliases. \nFor example, a single truststore alias can be imported using the following request:\nPOST /rest/apigateway/archive?trustStores=test_truststore\n\nWhereas, all the truststore aliases can be imported using the following request:\nPOST /rest/apigateway/archive?trustStores=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "trustStores=test_truststore"
        }, {
          "name" : "JNDIProviderAliases",
          "in" : "query",
          "description" : "This parameter identifies the JNDI provider aliases to be imported. JNDI provider aliases are idetified with it's name.\nThe wildcard \"*\" selects all the JNDI provider aliases. \nFor example, a single JNDI provider alias can be imported using the following request:\nPOST /rest/apigateway/archive?JNDIProviderAliases=test_jndiProviderAlias\n\nWhereas, all the JNDI provider aliases can be imported using the following request:\nPOST /rest/apigateway/archive?JNDIProviderAliases=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "JNDIProviderAliases=test_jndiProviderAlias"
        }, {
          "name" : "JMSConnectionAliases",
          "in" : "query",
          "description" : "This parameter identifies the JMS connection aliases to be imported. JMS connection aliases are idetified with it's name.\nThe wildcard \"*\" selects all the JNDI provider aliases. \nFor example, a single JNDI provider alias can be imported using the following request:\nPOST /rest/apigateway/archive?JMSConnectionAliases=test_jmsConnectionAlias\n\nWhereas, all the JMS connection aliases can be imported using the following request:\nPOST /rest/apigateway/archive?JMSConnectionAliases=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "JMSConnectionAliases=test_jmsConnectionAlias"
        }, {
          "name" : "JMSTriggers",
          "in" : "query",
          "description" : "This parameter identifies the JMS triggers to be imported. JMS triggers are idetified with it's name.\nThe wildcard \"*\" selects all the JMS triggers. \nFor example, a single JMS trigger can be imported using the following request:\nPOST /rest/apigateway/archive?JMSTriggers=test_jmsTrigger\n\nWhereas, all the JMS triggers can be imported using the following request:\nPOST /rest/apigateway/archive?JMSTriggers=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "JMSTriggers=test_jmsTrigger"
        }, {
          "name" : "webserviceEndpointAliases",
          "in" : "query",
          "description" : "This parameter identifies the 'web service endpoint' aliases to be imported. Web service endpoint aliases are idetified with it's name.\nThe wildcard \"*\" selects all the web service endpoint aliases. \nFor example, a single web service endpoint alias can be imported using the following request:\nPOST /rest/apigateway/archive?webserviceEndpointAliases=test_wsEndpointAlias\n\nWhereas, all the JMS triggers can be imported using the following request:\nPOST /rest/apigateway/archive?webserviceEndpointAliases=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "webserviceEndpointAliases=test_wsEndpointAlias"
        }, {
          "name" : "users",
          "in" : "query",
          "description" : "This parameter identifies the users to be imported. \nThe wildcard \"*\" selects all the users. \nFor example, a single user can be imported using the following request:\nPOST /rest/apigateway/archive?users=7a6d3d40-44d8-4ab1-83df-5be63cdbae54\n\nWhereas, all the users can be imported using the following request:\nPOST /rest/apigateway/archive?users=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "users=7a6d3d40-44d8-4ab1-83df-5be63cdbae54"
        }, {
          "name" : "groups",
          "in" : "query",
          "description" : "This parameter identifies the groups to be imported. \nThe wildcard \"*\" selects all the groups. \nFor example, a single group can be imported using the following request:\nPOST /rest/apigateway/archive?groups=d6b38ff8-59a8-47bf-9fba-0bdb24ee5b48\n\nWhereas, all the groups can be imported using the following request:\nPOST /rest/apigateway/archive?groups=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "groups=d6b38ff8-59a8-47bf-9fba-0bdb24ee5b48"
        }, {
          "name" : "accessProfiles",
          "in" : "query",
          "description" : "This parameter identifies the teams to be imported. \nThe wildcard \"*\" selects all the teams. \nFor example, a single team can be imported using the following request:\nPOST /rest/apigateway/archive?accessProfiles=d6b38ff8-59a8-47bf-9fba-0bdb24ee5b48\n\nWhereas, all the teams can be imported using the following request:\nPOST /rest/apigateway/archive?accessProfiles=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "accessProfiles=836fd806-4845-452f-9d7a-7e619e40a70e"
        }, {
          "name" : "kerberosSetting",
          "in" : "query",
          "description" : "This parameter identifies the kerberos configuration to be imported.\nThe kerberos configuration can be imported using the following request:\nPOST /rest/apigateway/archive?kerberosSetting=kerberosSetting",
          "required" : false,
          "type" : "string",
          "enum" : [ "kerberosSetting" ],
          "x-example" : "kerberosSetting=kerberosSetting"
        }, {
          "name" : "plans",
          "in" : "query",
          "description" : "This parameter identifies the plans to be imported. \nThe wildcard \"*\" selects all the plans. \nFor example, a single plan can be imported using the following request:\nPOST /rest/apigateway/archive?plans=86d58023-be4b-4735-a08f-14e78131ce4a\n\nWhereas, all the plans can be imported using the following request:\nPOST /rest/apigateway/archive?plans=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "plans=86d58023-be4b-4735-a08f-14e78131ce4a"
        }, {
          "name" : "packages",
          "in" : "query",
          "description" : "This parameter identifies the packages to be imported. \nThe wildcard \"*\" selects all the packages. \nFor example, a single package can be imported using the following request:\nPOST /rest/apigateway/archive?packages=73c93393-1477-4a99-9e44-c9b3e679de0c\n\nWhereas, all the packages can be imported using the following request:\nPOST /rest/apigateway/archive?packages=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "packages=73c93393-1477-4a99-9e44-c9b3e679de0c"
        }, {
          "name" : "configurations",
          "in" : "query",
          "description" : "This parameter identifies the configurations to be imported. \nThe wildcard \"*\" selects all the configurations. \nFor example, a single configuration can be imported using the following request:\nPOST /rest/apigateway/archive?configurations=loadBalancer,customContentTypes\n\nWhereas, all the configurations can be imported using the following request:\nPOST /rest/apigateway/archive?configurations=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "loadBalancer", "keystore", "mobileApp", "extended", "samlsso", "misc", "dashboard", "customContentTypes", "errorProcessing", "auditlogDestinationConfig", "gatewayDestinationConfig", "jdbcDestinationConfig", "desDestinationConfig", "elasticsearchDestinationConfig", "snmpDestinationConfig", "emailDestinationConfig", "apiPortalDestinationConfig", "samlIssuer", "logConfig", "passwordRestrictions", "passwordExpiry", "accountLockSettings", "ldapConfig", "settings", "cache", "apiCallBackSettings" ]
          },
          "collectionFormat" : "multi",
          "x-example" : "configurations=loadBalancer,customContentTypes"
        }, {
          "name" : "gatewayScopes",
          "in" : "query",
          "description" : "This parameter identifies the oauth scopes to be imported. \nThe wildcard \"*\" selects all the oauth scopes. \nFor example, a single oauth scope can be imported using the following request:\nPOST /rest/apigateway/archive?gatewayScopes=73c93393-1477-4a99-9e44-c9b3e679de0c\n\nWhereas, all the oauth scopes can be imported using the following request:\nPOST /rest/apigateway/archive?gatewayScopes=*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "x-example" : "gatewayScopes=5f388f25-2a57-46b9-b199-9d58fc02a8c1,c98805c4-9c05-47c0-84f0-c0855c0a9032"
        }, {
          "name" : "x-HTTP-Method-Override",
          "in" : "header",
          "description" : "This parameter is used to specify that this REST call is an export operation. The value for this field is GET. If this is specified then you need to provide the filtering criteria in body to specify the asset. If empty payload specified then all assets will be exported. ",
          "required" : false,
          "type" : "string",
          "enum" : [ "GET" ]
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ExportContext"
          }
        }, {
          "name" : "zipFile",
          "in" : "formData",
          "description" : "Zip file that contains the API Gateway asset needs to be imported",
          "required" : false,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "This response indicates that the archive is created successfully. The response body is the zipped archive."
          },
          "201" : {
            "description" : "This response indicates that the archive import was successful. The response body holds a detailed import log in application/json format.",
            "examples" : {
              "application/json" : "{\n  \"ArchiveResult\": [\n    {\n      \"PolicyAction\": {\n        \"name\": \"Straight Through Routing\",\n        \"id\": \"bc7c75ba-ad5e-4dd7-adb7-a62bcd60593d\",\n        \"status\": \"Failed\",\n        \"explanation\": \"Asset already exists.\",\n        \"overwritten\": false\n      }\n    },\n    {\n      \"PolicyAction\": {\n        \"name\": \"Require HTTP / HTTPS\",\n        \"id\": \"c3852da1-4e6e-440b-8fe9-7e5c1523d7f1\",\n        \"status\": \"Failed\",\n        \"explanation\": \"Asset already exists.\",\n        \"overwritten\": false\n      }\n    },\n    {\n      \"API\": {\n        \"name\": \"BayernRest\",\n        \"id\": \"70062a02-e7f9-4ead-a66e-313752a9b111\",\n        \"status\": \"Failed\",\n        \"explanation\": \"Asset already exists.\",\n        \"overwritten\": false\n      }\n    },\n    {\n      \"Policy\": {\n        \"name\": \"Default Policy for API BayernRest\",\n        \"id\": \"9a0d17c1-8bf1-4282-a53e-2b2ca634ba39\",\n        \"status\": \"Failed\",\n        \"explanation\": \"Asset already exists.\",\n        \"overwritten\": false\n      }\n    }\n  ]\n}"
            },
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ArchiveResult"
              }
            }
          },
          "400" : {
            "description" : "This response indicates that the request is invalid or faulty, for example, the request body may contain an invalid archive."
          },
          "401" : {
            "description" : "This response  indicates that invalid credentials have been provided for the request."
          },
          "500" : {
            "description" : "This response indicates that the server has encountered an error while exporting or importing  API Gateway Asset"
          }
        },
        "security" : [ {
          "Basic" : [ ]
        } ]
      }
    }
  },
  "securityDefinitions" : {
    "Basic" : {
      "description" : "API Gateway Administrator and API Gateway provider",
      "type" : "basic"
    }
  },
  "definitions" : {
    "ArchiveResult" : {
      "type" : "object",
      "properties" : {
        "dependencyFailed" : {
          "type" : "boolean"
        },
        "explanation" : {
          "type" : "string"
        },
        "importedOK" : {
          "type" : "boolean"
        },
        "name" : {
          "type" : "string"
        },
        "overwritten" : {
          "type" : "boolean"
        },
        "warning" : {
          "type" : "boolean"
        }
      }
    },
    "ExportContext" : {
      "type" : "object",
      "required" : [ "types" ],
      "properties" : {
        "aggregations" : {
          "$ref" : "#/definitions/IAggregation"
        },
        "condition" : {
          "type" : "string",
          "description" : "Condition between scope specified. The value can be either 'and' or 'or'",
          "enum" : [ "and", "or" ]
        },
        "deploymentFilter" : {
          "type" : "string",
          "description" : "This filter is used for deployment types."
        },
        "from" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The starting index of the record to be fetched. Default value is 0 which fetches from the start. The index is applied to each type separately. For each type the first n records are skipped as specified in from field. If the value specified is less than zero then the default value is taken for fetching records"
        },
        "includeOptions" : {
          "$ref" : "#/definitions/IncludeOptions"
        },
        "responseFields" : {
          "type" : "array",
          "description" : "List of fields to be fetched for the specified types.",
          "items" : {
            "type" : "string"
          }
        },
        "scope" : {
          "$ref" : "#/definitions/SearchField"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of records to be fetched. Default value is -1, which fetches all the records. The size is applied to each type separately. Each type has the records less than or equal to the size specified. If the value specified is less than zero then the default value is taken for fetching records"
        },
        "sortByField" : {
          "type" : "string",
          "description" : "Field name on which the sorting needs to be applied."
        },
        "sortOrder" : {
          "type" : "string",
          "description" : "Sort order for the records",
          "enum" : [ "ASC", "DESC" ]
        },
        "teamFilter" : {
          "type" : "array",
          "description" : "This filter is used to specify list teams to apply on the search results.",
          "items" : {
            "type" : "string"
          }
        },
        "types" : {
          "type" : "string",
          "description" : "List of allowed types that can be searched across API Gateway.",
          "enum" : [ "USER", "GROUP", "USERS", "GROUPS", "ACCESSPROFILES", "LDAPGROUPS", "CDSGROUPS", "ASSERTION", "APPLICATION", "API", "ALIAS", "POLICY", "POLICY_ACTION", "PLAN", "PACKAGE", "ADMINISTRATOR_SETTING", "PORTAL_GATEWAY", "OAUTH2_SCOPE_DATA", "SUBSCRIPTION", "API_DOCUMENT", "APPROVAL_CONFIGURATION", "OUTBOUND_PROXY", "PROXY_BYPASS", "URL_ALIAS", "KEYSTORE", "TRUSTSTORE", "KERBEROS_SETTING", "JNDI_PROVIDER_ALIAS", "JMS_CONNECTION_ALIAS", "JMS_TRIGGER", "WEB_SERVICE_ENDPOINT_ALIAS", "ACCESS_CONTROL_LIST", "RULE", "MICROGATEWAY_GROUPS", "GATEWAY_SCOPE", "OAUTH2MATERIALIZEDTOKEN", "TRANSACTION_EVENTS", "LIFECYCLE_EVENTS", "POLICYVIOLATION_EVENTS", "MONITOR_EVENTS", "ERROR_EVENTS", "THREATPROTECTION_EVENTS", "PERFORMANCE_METRICS", "QUOTA_USAGE", "DASHBOARD", "AUDIT_LOG", "REQUEST_RESPONSE_TRACE_SPANS", "APPLICATION_LOG", "MEDIATOR_TRACE_SPANS", "SERVER_LOG_TRACE_SPANS" ]
        }
      },
      "description" : "This defines the request structure to export the specific assets across API Gateway"
    },
    "GroupingAggregation" : {
      "allOf" : [ {
        "$ref" : "#/definitions/IAggregation"
      }, {
        "type" : "object",
        "properties" : {
          "fields" : {
            "type" : "string",
            "description" : "Input aggregation fields"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the aggregation in the search aggregation response"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of the aggregation.",
            "enum" : [ "metrics", "timeseries", "group" ]
          }
        },
        "description" : "This defines the aggregation structure to search across API Gateway"
      } ]
    },
    "IAggregation" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "fields" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        }
      },
      "description" : "This defines the aggregation structure to search across API Gateway"
    },
    "IncludeOptions" : {
      "type" : "object",
      "properties" : {
        "includeAccessProfiles" : {
          "type" : "boolean"
        },
        "includeAll" : {
          "type" : "boolean",
          "description" : "Include all dependent assets for all asset type specified"
        },
        "includeApis" : {
          "type" : "boolean",
          "description" : "Include API as dependent asset for asset type specified if applicable"
        },
        "includeApplications" : {
          "type" : "boolean",
          "description" : "Include application as dependent asset for asset type specified if applicable"
        },
        "includeDocuments" : {
          "type" : "boolean",
          "description" : "Include documents as dependent asset for asset type specified if applicable"
        },
        "includeGatewayScopes" : {
          "type" : "boolean"
        },
        "includeGroups" : {
          "type" : "boolean",
          "description" : "Include groups as dependent asset for asset type specified if applicable"
        },
        "includeRegisteredApplications" : {
          "type" : "boolean",
          "description" : "Include registered application as dependent asset for asset type specified if applicable"
        },
        "includeSubscriptions" : {
          "type" : "boolean",
          "description" : "Include subscriptions for the asset type specified if applicable"
        },
        "includeTruststores" : {
          "type" : "boolean"
        },
        "includeUsers" : {
          "type" : "boolean",
          "description" : "Include users as dependent asset for asset type specified if applicable"
        },
        "promotedGroupsList" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "promotedUsersList" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "promotion" : {
          "type" : "boolean"
        }
      },
      "description" : "It is used to specify the inclusion of dependent assets"
    },
    "MetricsAggregation" : {
      "allOf" : [ {
        "$ref" : "#/definitions/IAggregation"
      }, {
        "type" : "object",
        "properties" : {
          "fields" : {
            "type" : "string",
            "description" : "Input aggregation fields"
          },
          "metricsType" : {
            "type" : "string",
            "description" : "Type of the metrics aggregation.",
            "enum" : [ "avg", "min", "max", "sum" ]
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the aggregation in the search aggregation response"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of the aggregation.",
            "enum" : [ "metrics", "timeseries", "group" ]
          }
        },
        "description" : "This defines the aggregation structure to search across API Gateway"
      } ]
    },
    "SearchField" : {
      "type" : "object",
      "properties" : {
        "attributeName" : {
          "type" : "string",
          "description" : "Field name to be searched for the list of types specified"
        },
        "keyword" : {
          "type" : "string",
          "description" : "Value of the corresponding field to be matched. User can use regular expression to specify the multiple values for single attributeName. For example  to find \n 1. apiDescription contains \"weather\" or equals \"country\" , we can use {\"attributeName\" : \"apiDescription\", \"keyword\" : \".*weather.*|country\"}. \n 2. apiName starts with weather - {\"attributeName\" : \"apiName\", \"keyword\" : \"weather.*\"}. \n 3. api type is REST or SOAP - {\"attributeName\" : \"type\", \"keyword\" : \"REST|SOAP\"}."
        },
        "orTokenKey" : {
          "type" : "boolean"
        },
        "range" : {
          "$ref" : "#/definitions/SearchRange"
        },
        "rawFieldKey" : {
          "type" : "string"
        }
      },
      "description" : "A scope is filtering criteria for the list of types specified in search.It is a key/value pair. key is the field name on which the search is being done and value  contains the search string to be searched on the field specified.To get the field name for a type, user needs to access the corresponding API Gateway REST service to know about the fields available for a particular type. "
    },
    "SearchRange" : {
      "type" : "object",
      "properties" : {
        "from" : {
          "type" : "object",
          "description" : "from value is used to set the minimum value in the request criteria and it can be integer, date or datetime"
        },
        "since" : {
          "type" : "string",
          "example" : "30d",
          "description" : "This field is to search the data for the last few duration in units like seconds, minutes, hours, days and weeks. Possible units are [smhdw]"
        },
        "to" : {
          "type" : "object",
          "description" : "to value is used to set the maximum value in the request criteria and it can be integer, date or datetime"
        }
      },
      "description" : "A range is request criteria for the search operation applicable for the data types like date, datetime and integers. Range can be specified either by providing the 'from' and 'to' field or the 'since' field.For example to find \n 1. Search the transactional events generated in between 2020-04-01 (April 1, 2020) and 2020-05-31 (May 31, 2020), we can use {\"attributeName\" : \"creationDate\", \"range\" : {\"from\" : \"2020-04-01\", \"to\" : \"2020-05-31\"}}. \n 2. Search the transactional events where the request data size in between 1000 and 4000 - {\"attributeName\" : \"apiName\", \"range\" : {\"from\" : 1000, \"to\" : 4000}}."
    },
    "TimeSeriesAggregation" : {
      "allOf" : [ {
        "$ref" : "#/definitions/IAggregation"
      }, {
        "type" : "object",
        "properties" : {
          "fields" : {
            "type" : "string",
            "description" : "Input aggregation fields"
          },
          "interval" : {
            "type" : "string",
            "description" : "Interval of the time series in aggregation.",
            "enum" : [ "second", "minute", "hour", "day", "week", "month", "quarter", "year" ]
          },
          "intervalTypeAsString" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the aggregation in the search aggregation response"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of the aggregation.",
            "enum" : [ "metrics", "timeseries", "group" ]
          }
        },
        "description" : "This defines the aggregation structure to search across API Gateway"
      } ]
    }
  }
}