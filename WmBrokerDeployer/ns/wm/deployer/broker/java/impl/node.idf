<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="shared">LyoqCiAqIFJlYWQgdGhlIGNvbm5lY3Rpb25Qcm9wZXJ0aWVzdCB0byBmb3JtIGNvbm5lY3Rpb24g
dG8gdGhlIEJyb2tlci4KICogUmVxdWlyZWQgcHJvcGVydGllcyBhcmU6IGhvc3QsIHBvcnQsIEFM
SUFTIGFuZCBCcm9rZXJOYW1lCiAqLwpwcml2YXRlIHN0YXRpYyBNYXA8U3RyaW5nLCBTdHJpbmc+
IHJlYWRDb25uZWN0aW9uUHJvcGVydGllcyhJRGF0YUN1cnNvciBjdXJzb3IpIHsKCglJRGF0YVtd
IGNvbm5lY3Rpb25Qcm9wZXJ0aWVzID0gSURhdGFVdGlsLmdldElEYXRhQXJyYXkoY3Vyc29yLCBD
T05ORUNUSU9OX1BST1BFUlRJRVMpOwoJTWFwPFN0cmluZywgU3RyaW5nPiBwcm9wZXJ0aWVzTWFw
ID0gbmV3IEhhc2hNYXA8U3RyaW5nLCBTdHJpbmc+KCk7CgoJaWYoY29ubmVjdGlvblByb3BlcnRp
ZXMgIT0gbnVsbCkgewoKCQlmb3IoaW50IGluZGV4ID0gMDsgaW5kZXggPCBjb25uZWN0aW9uUHJv
cGVydGllcy5sZW5ndGg7ICsraW5kZXgpIHsKCQkJSURhdGFDdXJzb3IgcHJvcGVydGllc0N1cnNv
ciA9IGNvbm5lY3Rpb25Qcm9wZXJ0aWVzW2luZGV4XS5nZXRDdXJzb3IoKTsKCgkJCVN0cmluZyBr
ZXkgPSBJRGF0YVV0aWwuZ2V0U3RyaW5nKHByb3BlcnRpZXNDdXJzb3IsIEtFWSk7CgkJCVN0cmlu
ZyB2YWx1ZSA9IElEYXRhVXRpbC5nZXRTdHJpbmcocHJvcGVydGllc0N1cnNvciwgVkFMVUUpOwoK
CQkJcHJvcGVydGllc01hcC5wdXQoa2V5LCB2YWx1ZSk7CgkJCXByb3BlcnRpZXNDdXJzb3IuZGVz
dHJveSgpOwoJCX0KCX0KCglyZXR1cm4gcHJvcGVydGllc01hcDsKfQoKLyoqCiAqIFJldHJpZXZl
IHRoZSBwZXJzaXN0ZW5jZSBtYW5hZ2VyIGJhc2VkIG9uIHRoZSB2YWx1ZSBzZXQgZm9yIHdtQnJv
a2VyRGVwbG95ZXIucHJvcGVydGllcy4KICogSWYgYWJvdmUgdmFsdWUgaXMgbnVsbCwgdXNlICJC
cm9rZXJSZXBvc2l0b3J5IiBmb2xkZXIgYXMgZGVmYXVsdC4KICogQWRkIEFMSUFTIHRvIHRoaXMg
cGF0aCBmb3IgYSBwYXJ0aWN1bGFyIHRhcmdldCBydW50aW1lLgogKi8KcHJpdmF0ZSBzdGF0aWMg
UGVyc2lzdGVuY2VNYW5hZ2VyIGdldFBlcnNpc3RlbmNlTWFuYWdlcihNYXA8U3RyaW5nLCBTdHJp
bmc+IHByb3BlcnRpZXNNYXApIHRocm93cyBTZXJ2aWNlRXhjZXB0aW9uewoKCXRyeSB7CgkJU3Ry
aW5nIGFsaWFzID0gcHJvcGVydGllc01hcC5nZXQoQUxJQVMpOwoKCQlpZihhbGlhcyA9PSBudWxs
IHx8IGFsaWFzLmxlbmd0aCgpIDw9IDApIHsKCQkJdGhyb3cgbmV3IFNlcnZpY2VFeGNlcHRpb24o
QUNETFJlc291cmNlcy5nZXRMb2NhbGl6ZWRNZXNzYWdlKEFDRExSZXNvdXJjZXMuRVJST1JfTUlT
U0lOR19BTElBUywgbnVsbCkpOwoJCX0KCgkJLy8gSVMgcGFja2FnZSBwYXRoCgkJU3RyaW5nQnVp
bGRlciBwYWNrYWdlUGF0aCA9IG5ldyBTdHJpbmdCdWlsZGVyKCJwYWNrYWdlcyIpLmFwcGVuZChG
aWxlLnNlcGFyYXRvcikKCQkJCQkJLmFwcGVuZCgiV21Ccm9rZXJEZXBsb3llciIpOwoKCQkvLyBw
YXRoIHdoZXJlIHByb3BlcnRpZXMgZmlsZSBzaXRzLgoJCVN0cmluZ0J1aWxkZXIgcHJvcHNQYXRo
ID0gbmV3IFN0cmluZ0J1aWxkZXIocGFja2FnZVBhdGgpLmFwcGVuZChGaWxlLnNlcGFyYXRvciku
YXBwZW5kKCJjb25maWciKQoJCQkJCS5hcHBlbmQoRmlsZS5zZXBhcmF0b3IpLmFwcGVuZCgid21C
cm9rZXJEZXBsb3llci5wcm9wZXJ0aWVzIik7CgoJCS8vIERlZmF1bHQgcGF0aCwgaWYgbm8gcGF0
aCBpcyBtZW50aW9uZWQuCgkJU3RyaW5nQnVpbGRlciBkZWZhdWx0UGF0aCA9IG5ldyBTdHJpbmdC
dWlsZGVyKCJyZXBsaWNhdGUiKS5hcHBlbmQoRmlsZS5zZXBhcmF0b3IpLmFwcGVuZCgiZGVwbG95
ZXIiKQoJCQkJCS5hcHBlbmQoRmlsZS5zZXBhcmF0b3IpLmFwcGVuZChCUk9LRVJfTkFNRVNQQUNF
KTsKCgkJUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKTsKCQlTdHJpbmdC
dWlsZGVyIHBhdGggPSBudWxsOwoJCUZpbGVJbnB1dFN0cmVhbSBpbyA9IG51bGw7CgoJCXRyeSB7
CgkJCWlvID0gbmV3IEZpbGVJbnB1dFN0cmVhbShwcm9wc1BhdGgudG9TdHJpbmcoKSk7CgkJCXBy
b3BlcnRpZXMubG9hZChpbyk7CgkJfSBjYXRjaCAoRmlsZU5vdEZvdW5kRXhjZXB0aW9uIGUpIHsK
CQkJLy8gZWF0IGl0IHVwISB1c2UgdGhlIGRlZmF1bHQgZm9sZGVyLgoJCX0gY2F0Y2ggKElPRXhj
ZXB0aW9uIGUpIHsKCQkJLy8gZWF0IGl0IHVwISB1c2UgdGhlIGRlZmF1bHQgZm9sZGVyLgoJCX0g
ZmluYWxseSB7CgkJCWlmKGlvICE9IG51bGwpIHsKCQkJCXRyeSB7CgkJCQkJaW8uY2xvc2UoKTsK
CQkJCX0gY2F0Y2goSU9FeGNlcHRpb24gZSkgewoJCQkJCS8vIGVhdCBpdCB1cC4gdXNlIHRoZSBk
ZWZhdWx0IGluc3RlZC4KCQkJCX0KCQkJfQoJCX0KCgkJLy8gaWYgdGhlIHByb3BlcnR5IGlzIG5v
dCBwcmVzZW50IHVzZSB0aGUgZGVmYXVsdC4KCQlTdHJpbmcgcHJvcGVydHlWYWx1ZSA9IHByb3Bl
cnRpZXMuZ2V0UHJvcGVydHkoInBlcnNpc3RlbmNlTWFuYWdlci5wYXRoIik7CgoJCWlmKHByb3Bl
cnR5VmFsdWUgPT0gbnVsbCB8fCBwcm9wZXJ0eVZhbHVlLmxlbmd0aCgpIDw9IDApIHsKCQkJcGF0
aCA9IGRlZmF1bHRQYXRoOwoKCQl9IGVsc2UgewoJCQlwYXRoID0gbmV3IFN0cmluZ0J1aWxkZXIo
cHJvcGVydHlWYWx1ZSk7CgkJfQoKCQlwYXRoID0gcGF0aC5hcHBlbmQoRmlsZS5zZXBhcmF0b3Ip
LmFwcGVuZChhbGlhcyk7CgoJCXJldHVybiBuZXcgRmlsZVBlcnNpc3RlbmNlTWFuYWdlcihwYXRo
LnRvU3RyaW5nKCkpOwoKCX0gY2F0Y2ggKFBlcnNpc3RlbmNlRXhjZXB0aW9uIGUpIHsKCQl0aHJv
dyBuZXcgU2VydmljZUV4Y2VwdGlvbihlKTsKCX0KfQoKLyoqCiAqIFdyaXRlIHRoZSBtZXNzYWdl
cyByZXR1cm5lZCBieSB0aGUgZGVwbG95bWVudCBhcyB0aGUgcmVzdWx0IG9mIHRoZSBBUEkgY2Fs
bC4KICovCnByaXZhdGUgc3RhdGljIGJvb2xlYW4gd3JpdGVNZXNzYWdlcyhMaXN0PERlcGxveWVy
TWVzc2FnZT4gbWVzc2FnZXMsIElEYXRhW10gbWVzc2FnZXNJRGF0YSkgewoKCWJvb2xlYW4gaXNT
dWNjZXNzZnVsID0gdHJ1ZTsKCUlTTzg2MDFEYXRlVGltZUNvZGVyIGNvZGVyID0gbmV3IElTTzg2
MDFEYXRlVGltZUNvZGVyKCk7CgoJaWYobWVzc2FnZXMgIT0gbnVsbCkgewoKCQlJdGVyYXRvcjxE
ZXBsb3llck1lc3NhZ2U+IG1zZ0l0ZXJhdG9yID0gbWVzc2FnZXMuaXRlcmF0b3IoKTsKCQlpbnQg
aW5kZXggPSAwOwoKCQl3aGlsZShtc2dJdGVyYXRvci5oYXNOZXh0KCkpIHsKCQkJbWVzc2FnZXNJ
RGF0YVtpbmRleF0gPSBJRGF0YUZhY3RvcnkuY3JlYXRlKCk7CgkJCUlEYXRhQ3Vyc29yIG1lc3Nh
Z2VDdXJzb3IgPSBtZXNzYWdlc0lEYXRhW2luZGV4XS5nZXRDdXJzb3IoKTsKCgkJCXRyeSB7CgkJ
CQlEZXBsb3llck1lc3NhZ2UgbWVzc2FnZSA9IG1zZ0l0ZXJhdG9yLm5leHQoKTsKCgkJCQlpZiht
ZXNzYWdlLmdldE1lc3NhZ2VUeXBlKCkgPT0gQWNkbFJlcG9ydE1lc3NhZ2UuTWVzc2FnZVR5cGUu
RVJST1IpewoJCQkJCWlzU3VjY2Vzc2Z1bCA9IGZhbHNlOwoJCQkJfQoKCQkJCUlEYXRhVXRpbC5w
dXQobWVzc2FnZUN1cnNvciwgVFlQRSwgbWVzc2FnZS5nZXRNZXNzYWdlVHlwZSgpLm9yZGluYWwo
KSk7CgkJCQlJRGF0YVV0aWwucHV0KG1lc3NhZ2VDdXJzb3IsIFRFWFQsIG1lc3NhZ2UuZ2V0VGV4
dCgpKTsKCQkJCUlEYXRhVXRpbC5wdXQobWVzc2FnZUN1cnNvciwgVElNRVNUQU1QLCBjb2Rlci5l
bmNvZGUobWVzc2FnZS5nZXRUaW1lc3RhbXAoKSkpOwoJCQkJSURhdGFVdGlsLnB1dChtZXNzYWdl
Q3Vyc29yLCBDT01QT1NJVEVfTkFNRSwgbWVzc2FnZS5nZXRDb21wb3NpdGVOYW1lKCkpOwoJCQkJ
SURhdGFVdGlsLnB1dChtZXNzYWdlQ3Vyc29yLCBDT01QT1NJVEVfVFlQRSwgbWVzc2FnZS5nZXRD
b21wb3NpdGVUeXBlKCkpOwoJCQkJSURhdGFVdGlsLnB1dChtZXNzYWdlQ3Vyc29yLCBBU1NFVF9O
QU1FLCBtZXNzYWdlLmdldEFzc2V0TmFtZSgpKTsKCQkJCUlEYXRhVXRpbC5wdXQobWVzc2FnZUN1
cnNvciwgQVNTRVRfVFlQRSwgbWVzc2FnZS5nZXRJbXBsZW1lbnRhdGlvblR5cGUoKSk7CgoJCQkJ
aW5kZXgrKzsKCQkJfSBmaW5hbGx5IHsKCQkJCW1lc3NhZ2VDdXJzb3IuZGVzdHJveSgpOwoJCQl9
CgkJfQoJfQoJcmV0dXJuIGlzU3VjY2Vzc2Z1bDsKfQoKLyoqCiAqIENvbnZlcnQgdGhlIGNoZWNr
cG9pbnQgYXJ0aWZhY3RzIHRvIExpc3Qgb2YgQXJ0aWZhY3QKICovCnByaXZhdGUgc3RhdGljIExp
c3Q8QXJ0aWZhY3Q+IHJlYWRDaGVja3BvaW50QXJ0aWZhY3RzKElEYXRhW10gYXJ0aWZhY3RzKSB0
aHJvd3MgU2VydmljZUV4Y2VwdGlvbnsKCglMaXN0PEFydGlmYWN0PiBhcnRpZmFjdExpc3QgPSBu
ZXcgQXJyYXlMaXN0PEFydGlmYWN0PigpOwoJTGlzdDxBc3NldD4gYXNzZXRzTGlzdCA9IG51bGw7
CgoJaWYoYXJ0aWZhY3RzICE9IG51bGwpIHsKCQl0cnkgewoJCQlmb3IoaW50IGluZGV4ID0gMDsg
aW5kZXggPCBhcnRpZmFjdHMubGVuZ3RoOyArK2luZGV4KSB7CgoJCQkJSURhdGFDdXJzb3IgYXJ0
aWZhY3RzQ3Vyc29yID0gYXJ0aWZhY3RzW2luZGV4XS5nZXRDdXJzb3IoKTsKCgkJCQl0cnkgewoJ
CQkJCUlEYXRhW10gYXNzZXRzID0gSURhdGFVdGlsLmdldElEYXRhQXJyYXkoYXJ0aWZhY3RzQ3Vy
c29yLCBBU1NFVFMpOwoKCQkJCQlpZihhc3NldHMgIT0gbnVsbCkgewoJCQkJCQlhc3NldHNMaXN0
ID0gbmV3IEFycmF5TGlzdDxBc3NldD4oKTsKCgkJCQkJCWZvciggaW50IGluZGV4MSA9IDA7IGlu
ZGV4MSA8IGFzc2V0cy5sZW5ndGg7ICsraW5kZXgxKSB7CgoJCQkJCQkJSURhdGFDdXJzb3IgYXNz
ZXRDdXJzb3IgPSBhc3NldHNbaW5kZXgxXS5nZXRDdXJzb3IoKTsKCgkJCQkJCQl0cnkgewoJCQkJ
CQkJCS8vIGZldGNoIHRoZSBhc3NldCB2YWx1ZXMgZnJvbSBwaXBlbGluZQoJCQkJCQkJCVN0cmlu
ZyBhc3NldFR5cGUgPSBJRGF0YVV0aWwuZ2V0U3RyaW5nKGFzc2V0Q3Vyc29yLCBUWVBFKTsKCQkJ
CQkJCQlTdHJpbmcgYXNzZXRJZCA9IElEYXRhVXRpbC5nZXRTdHJpbmcoYXNzZXRDdXJzb3IsIElE
KTsKCgkJCQkJCQkJLy8gd3JpdGUgdG8gdGhlIGxpc3Qgb2YgYXNzZXRzCgkJCQkJCQkJQXNzZXQg
YXNzZXQgPSBuZXcgQXNzZXQoYXNzZXRJZCwgQXNzZXRUeXBlLmdldEFzc2V0VHlwZShhc3NldFR5
cGUpKTsKCQkJCQkJCQlhc3NldHNMaXN0LmFkZChhc3NldCk7CgoJCQkJCQkJfSBmaW5hbGx5IHsK
CQkJCQkJCQlhc3NldEN1cnNvci5kZXN0cm95KCk7CgkJCQkJCQl9CgkJCQkJCX0KCQkJCQl9CgoJ
CQkJCS8vIGZldGNoIHRoZSB2YWx1ZXMgb2YgYXJ0aWZhY3QgZnJvbSB0aGUgcGlwZWxpbmUKCQkJ
CQlTdHJpbmcgY29tcG9zaXRlTmFtZSA9IElEYXRhVXRpbC5nZXRTdHJpbmcoYXJ0aWZhY3RzQ3Vy
c29yLCBDT01QT1NJVEVfTkFNRSk7CgkJCQkJU3RyaW5nIGNvbXBvc2l0ZVR5cGUgPSBJRGF0YVV0
aWwuZ2V0U3RyaW5nKGFydGlmYWN0c0N1cnNvciwgQ09NUE9TSVRFX1RZUEUpOwoKCQkJCQkvLyBj
cmVhdGUgYW4gYXJ0aWZhY3QKCQkJCQlBcnRpZmFjdCBhcnRpZmFjdCA9IG5ldyBBcnRpZmFjdCgp
OwoJCQkJCQoJCQkJCS8vbWFraW5nIHRoZSBjb21wb3NpdGVOYW1lIGFuZCBjb21wb3NpdGVUeXBl
IGlucHV0cyBvZiBDaGVja3BvaW50IEFQSSBvcHRpb25hbC4KCQkJCQlpZiAoY29tcG9zaXRlTmFt
ZSE9bnVsbCAmJiBjb21wb3NpdGVUeXBlIT1udWxsKXsKCQkJCQkJYXJ0aWZhY3Quc2V0Q29tcG9z
aXRlTmFtZShjb21wb3NpdGVOYW1lKTsKCQkJCQkJYXJ0aWZhY3Quc2V0Q29tcG9zaXRlVHlwZShD
b21wb3NpdGVUeXBlLmdldENvbXBvc2l0ZVR5cGUoY29tcG9zaXRlVHlwZSkpOwoJCQkJCX0KCQkJ
CQlhcnRpZmFjdC5zZXRBc3NldExpc3QoYXNzZXRzTGlzdCk7CQoKCQkJCQkvLyBhZGQgdGhlIGFi
b3ZlIGNyZWF0ZWQgYXJ0aWZhY3QgdG8gYXJ0aWZhY3QgbGlzdAoJCQkJCWFydGlmYWN0TGlzdC5h
ZGQoYXJ0aWZhY3QpOwoKCQkJCX0gZmluYWxseSB7CgkJCQkJYXJ0aWZhY3RzQ3Vyc29yLmRlc3Ry
b3koKTsKCQkJCX0KCQkJfQoJCX0gY2F0Y2goRGVwbG95ZXJSdW50aW1lRXhjZXB0aW9uIGUpIHsK
CQkJdGhyb3cgbmV3IFNlcnZpY2VFeGNlcHRpb24oZSk7CgkJfQoJfQoKCXJldHVybiBhcnRpZmFj
dExpc3Q7Cn0KCi8qKgogKiBSZWFkcyBhbmQgY29udmVydHMgYWxsIHRoZSBhcnRpZmFjdHMgdG8g
cmVhZCBhIGxpc3QuCiAqLwpwcml2YXRlIHN0YXRpYyBMaXN0PERlbGl2ZXJlZEFydGlmYWN0PiBy
ZWFkQXJ0aWZhY3RzIChJRGF0YVtdIGFydGlmYWN0cykgdGhyb3dzIFNlcnZpY2VFeGNlcHRpb257
CgoJTGlzdDxEZWxpdmVyZWRBcnRpZmFjdD4gYXJ0aWZhY3RMaXN0ID0gbnVsbDsKCURlbGl2ZXJl
ZEFydGlmYWN0IGFydGlmYWN0ID0gbnVsbDsKCglpZihhcnRpZmFjdHMgIT0gbnVsbCAmJiBhcnRp
ZmFjdHMubGVuZ3RoID4gMCkgewoKCQlhcnRpZmFjdExpc3QgPSBuZXcgQXJyYXlMaXN0PERlbGl2
ZXJlZEFydGlmYWN0PihhcnRpZmFjdHMubGVuZ3RoKTsKCgkJZm9yKGludCBpbmRleCA9IDA7IGlu
ZGV4IDwgYXJ0aWZhY3RzLmxlbmd0aDsgKytpbmRleCkgewoKCQkJSURhdGFDdXJzb3IgYXJ0aWZh
Y3RzQ3Vyc29yID0gYXJ0aWZhY3RzW2luZGV4XS5nZXRDdXJzb3IoKTsKCgkJCXRyeSB7CgoJCQkJ
Ly8gcmVhZCB0aGUgYWNkbCBhbmQgYmluYXkgWE9QT2JqZWN0cwoJCQkJWE9QT2JqZWN0IGFjZGwg
PSAoWE9QT2JqZWN0KUlEYXRhVXRpbC5nZXQoIGFydGlmYWN0c0N1cnNvciwgQUNETCk7CgkJCQlY
T1BPYmplY3QgYmluYXJ5ID0gKFhPUE9iamVjdClJRGF0YVV0aWwuZ2V0KCBhcnRpZmFjdHNDdXJz
b3IsIEJJTkFSWSk7CgoJCQkJLy8gY29udmVydCB0aGVtIHRvIERlbGl2ZXJlZEFydGlmYWN0CgkJ
CQlhcnRpZmFjdCA9IG5ldyBEZWxpdmVyZWRBcnRpZmFjdChhY2RsLmdldElucHV0U3RyZWFtKCks
IGJpbmFyeS5nZXRJbnB1dFN0cmVhbSgpLCBudWxsKTsKCQkJCWFydGlmYWN0TGlzdC5hZGQoYXJ0
aWZhY3QpOwoKCQkJfSBjYXRjaCAoTG9jYWxpemVkUnVudGltZUV4Y2VwdGlvbiBlKSB7CgkJCQl0
aHJvdyBuZXcgU2VydmljZUV4Y2VwdGlvbihlKTsKCQkJfSBjYXRjaCAoUGVyc2lzdGVuY2VFeGNl
cHRpb24gZSkgewoJCQkJdGhyb3cgbmV3IFNlcnZpY2VFeGNlcHRpb24oZSk7CgkJCX0gY2F0Y2gg
KElPRXhjZXB0aW9uIGUpIHsKCQkJCXRocm93IG5ldyBTZXJ2aWNlRXhjZXB0aW9uKGUpOwoJCQl9
IGZpbmFsbHkgewoJCQkJYXJ0aWZhY3RzQ3Vyc29yLmRlc3Ryb3koKTsKCQkJfQoJCX0KCX0KCgly
ZXR1cm4gYXJ0aWZhY3RMaXN0Owp9CgovKioKICogQ29udmVydCB0aGUgdmVyc2lvbiBpbnRvIFBy
b2R1Y3QgRGV0YWlscwogKi8KcHJpdmF0ZSBzdGF0aWMgSURhdGFbXSB3cml0ZVByb2R1Y3REZXRh
aWxzIChTdHJpbmcgdmVyc2lvbikgewoKCUlEYXRhQ3Vyc29yIHByb2R1Y3REZXRhaWxzQ3Vyc29y
ID0gbnVsbDsKCUlEYXRhW10JcHJvZHVjdERldGFpbHMgPSBuZXcgSURhdGFbMV07CgoJdHJ5IHsK
CQlwcm9kdWN0RGV0YWlsc1swXSA9IElEYXRhRmFjdG9yeS5jcmVhdGUoKTsKCQlwcm9kdWN0RGV0
YWlsc0N1cnNvciA9IHByb2R1Y3REZXRhaWxzWzBdLmdldEN1cnNvcigpOwoKCQlJRGF0YVV0aWwu
cHV0KCBwcm9kdWN0RGV0YWlsc0N1cnNvciwgTkFNRVNQQUNFLCBCUk9LRVJfTkFNRVNQQUNFKTsK
CQlJRGF0YVV0aWwucHV0KCBwcm9kdWN0RGV0YWlsc0N1cnNvciwgVkVSU0lPTiwgdmVyc2lvbik7
CgoJfSBmaW5hbGx5IHsKCQlwcm9kdWN0RGV0YWlsc0N1cnNvci5kZXN0cm95KCk7Cgl9CgoJcmV0
dXJuIHByb2R1Y3REZXRhaWxzOwp9CgovKioKICogUmVhZCB0aGUgYXNzZXQgaWRlbnRpZmllcnMg
aW50byBMaXN0IG9mIEFzc2V0cwogKi8KcHJpdmF0ZSBzdGF0aWMgTGlzdDxBc3NldD4gcmVhZEFz
c2V0SWRlbnRpZmllcnMoSURhdGFDdXJzb3IgY3Vyc29yKSB0aHJvd3MgRGVwbG95ZXJSdW50aW1l
RXhjZXB0aW9uIHsKCglMaXN0PEFzc2V0PiBhc3NldHMgPSBudWxsOwoJLy8gYXNzZXRJZGVudGlm
aWVycwoJSURhdGFbXQlhc3NldElkZW50aWZpZXJzID0gSURhdGFVdGlsLmdldElEYXRhQXJyYXko
Y3Vyc29yLCBBU1NFVF9JREVOVElGSUVSUyk7CglpZiAoIGFzc2V0SWRlbnRpZmllcnMgIT0gbnVs
bCkgewoKCQlhc3NldHMgPSBuZXcgQXJyYXlMaXN0PEFzc2V0Pihhc3NldElkZW50aWZpZXJzLmxl
bmd0aCk7CgkJZm9yICggaW50IGkgPSAwOyBpIDwgYXNzZXRJZGVudGlmaWVycy5sZW5ndGg7IGkr
KyApIHsKCgkJCUlEYXRhQ3Vyc29yIGFzc2V0SWRlbnRpZmllcnNDdXJzb3IgPSBhc3NldElkZW50
aWZpZXJzW2ldLmdldEN1cnNvcigpOwoKCQkJdHJ5IHsKCQkJCVN0cmluZwl0eXBlID0gSURhdGFV
dGlsLmdldFN0cmluZyggYXNzZXRJZGVudGlmaWVyc0N1cnNvciwgVFlQRSk7CgkJCQlTdHJpbmcJ
aWQgPSBJRGF0YVV0aWwuZ2V0U3RyaW5nKCBhc3NldElkZW50aWZpZXJzQ3Vyc29yLCBJRCk7CgkJ
CQlhc3NldHMuYWRkKG5ldyBBc3NldChpZCwgQXNzZXRUeXBlLmdldEFzc2V0VHlwZSh0eXBlKSkp
OwoKCQkJfSBmaW5hbGx5IHsKCQkJCWFzc2V0SWRlbnRpZmllcnNDdXJzb3IuZGVzdHJveSgpOwoJ
CQl9CgkJfQoJfQoJcmV0dXJuIGFzc2V0czsKfQoKLyoqCiAqIFJlYWQgdGhlIGFzc2V0IHR5cGVz
IGludG8gTGlzdCBvZiBBc3NldFR5cGVzCiAqLwpwcml2YXRlIHN0YXRpYyBMaXN0PEFzc2V0VHlw
ZT4gcmVhZEFzc2V0VHlwZXMoSURhdGFDdXJzb3IgY3Vyc29yKSB0aHJvd3MgRGVwbG95ZXJSdW50
aW1lRXhjZXB0aW9uIHsKCglMaXN0PEFzc2V0VHlwZT4gYXNzZXRUeXBlcyA9IG51bGw7CgkvLyBh
c3NldElkZW50aWZpZXJzCglJRGF0YVtdCWFzc2V0SWRlbnRpZmllcnMgPSBJRGF0YVV0aWwuZ2V0
SURhdGFBcnJheShjdXJzb3IsIEFTU0VUX0lERU5USUZJRVJTKTsKCgoJaWYgKCBhc3NldElkZW50
aWZpZXJzICE9IG51bGwpIHsKCgkJYXNzZXRUeXBlcyA9IG5ldyBBcnJheUxpc3Q8QXNzZXRUeXBl
Pihhc3NldElkZW50aWZpZXJzLmxlbmd0aCk7CgkJZm9yICggaW50IGkgPSAwOyBpIDwgYXNzZXRJ
ZGVudGlmaWVycy5sZW5ndGg7IGkrKyApIHsKCgkJCUlEYXRhQ3Vyc29yIGFzc2V0VHlwZXNDdXJz
b3IgPSBhc3NldElkZW50aWZpZXJzW2ldLmdldEN1cnNvcigpOwoKCQkJdHJ5IHsKCQkJCS8vIEZv
ciBCcm9rZXIsIElEIGFuZCBuYW1lIGFyZSBvZiBubyByZWxldmFuY2UsIGlnbm9yZS4KCQkJCVN0
cmluZwl0eXBlID0gSURhdGFVdGlsLmdldFN0cmluZyggYXNzZXRUeXBlc0N1cnNvciwgVFlQRSk7
CgkJCQlhc3NldFR5cGVzLmFkZChBc3NldFR5cGUuZ2V0QXNzZXRUeXBlKHR5cGUpKTsKCQkJfSBm
aW5hbGx5IHsKCQkJCWFzc2V0VHlwZXNDdXJzb3IuZGVzdHJveSgpOwoJCQl9CgkJfQoJfQoKCXJl
dHVybiBhc3NldFR5cGVzOwp9CgovKioKICogUmVhZCB0aGUgY29tcGxldGUgc2V0IG9mIGFzc2V0
IGlkZW50aWZpZXJzIHByb3BlcnRpZXMgaW50byBMaXN0IG9mIEFzc2V0cwogKi8KcHJpdmF0ZSBz
dGF0aWMgTGlzdDxBc3NldD4gcmVhZEFzc2V0cyhJRGF0YUN1cnNvciBjdXJzb3IpIHRocm93cyBE
ZXBsb3llclJ1bnRpbWVFeGNlcHRpb24gewoKCUxpc3Q8QXNzZXQ+IGFzc2V0cyA9IG51bGw7CglJ
RGF0YVtdCWFzc2V0SWRlbnRpZmllcnMgPSBJRGF0YVV0aWwuZ2V0SURhdGFBcnJheShjdXJzb3Is
IEFTU0VUUyk7CgoJaWYgKCBhc3NldElkZW50aWZpZXJzICE9IG51bGwpIHsKCgkJYXNzZXRzID0g
bmV3IEFycmF5TGlzdDxBc3NldD4oYXNzZXRJZGVudGlmaWVycy5sZW5ndGgpOwoJCWZvciAoIGlu
dCBpID0gMDsgaSA8IGFzc2V0SWRlbnRpZmllcnMubGVuZ3RoOyBpKysgKSB7CgoJCQlJRGF0YUN1
cnNvciBhc3NldElkZW50aWZpZXJzQ3Vyc29yID0gYXNzZXRJZGVudGlmaWVyc1tpXS5nZXRDdXJz
b3IoKTsKCgkJCXRyeSB7CgkJCQlTdHJpbmcJdHlwZSA9IElEYXRhVXRpbC5nZXRTdHJpbmcoIGFz
c2V0SWRlbnRpZmllcnNDdXJzb3IsIFRZUEUpOwoJCQkJU3RyaW5nCWlkID0gSURhdGFVdGlsLmdl
dFN0cmluZyggYXNzZXRJZGVudGlmaWVyc0N1cnNvciwgSUQpOwoKCQkJCUFzc2V0IGFzc2V0ID0g
bmV3IEFzc2V0KGlkLCBBc3NldFR5cGUuZ2V0QXNzZXRUeXBlKHR5cGUpKTsKCQkJCWFzc2V0LnNl
dE5hbWUoSURhdGFVdGlsLmdldFN0cmluZyggYXNzZXRJZGVudGlmaWVyc0N1cnNvciwgTkFNRSkp
OwoJCQkJU3RyaW5nW10gcGF0aCA9IElEYXRhVXRpbC5nZXRTdHJpbmdBcnJheSggYXNzZXRJZGVu
dGlmaWVyc0N1cnNvciwgUEFUSCk7CgoJCQkJaWYocGF0aCAhPSBudWxsKSB7CgkJCQkJYXNzZXQu
c2V0UGF0aChwYXRoWzBdKTsKCQkJCX0KCgkJCQlhc3NldC5zZXRQYXJlbnRJZChJRGF0YVV0aWwu
Z2V0U3RyaW5nKCBhc3NldElkZW50aWZpZXJzQ3Vyc29yLCBQQVJFTlRfSUQpKTsKCQkJCWFzc2V0
LnNldEZ1bGxOYW1lKElEYXRhVXRpbC5nZXRTdHJpbmcoIGFzc2V0SWRlbnRpZmllcnNDdXJzb3Is
IEZVTExfTkFNRSkpOwoKCQkJCWFzc2V0cy5hZGQoYXNzZXQpOwoKCQkJfSBmaW5hbGx5IHsKCQkJ
CWFzc2V0SWRlbnRpZmllcnNDdXJzb3IuZGVzdHJveSgpOwoJCQl9CgkJfQoJfQoJcmV0dXJuIGFz
c2V0czsKfQoKLyoqCiAqIFdyaXRlIHRoZSBMaXN0IG9mIEFzc2V0cyBpbnRvIHRoZSBwaXBlbGlu
ZQogKi8KcHJpdmF0ZSBzdGF0aWMgSURhdGFbXSB3cml0ZUFzc2V0cyhMaXN0PEFzc2V0PiBhc3Nl
dHMsIGJvb2xlYW4gY29tcGxldGUpIHRocm93cyBEZXBsb3llclJ1bnRpbWVFeGNlcHRpb257CgoJ
SURhdGFbXQlhc3NldEluZm8gPSBudWxsOwoKCWlmKGFzc2V0cyAhPSBudWxsKSB7CgkJYXNzZXRJ
bmZvID0gbmV3IElEYXRhW2Fzc2V0cy5zaXplKCldOwoKCQlmb3IgKCBpbnQgaSA9IDA7IGkgPCBh
c3NldHMuc2l6ZSgpOyBpKysgKSB7CgkJCWFzc2V0SW5mb1tpXSA9IElEYXRhRmFjdG9yeS5jcmVh
dGUoKTsKCQkJSURhdGFDdXJzb3IgYXNzZXRJbmZvQ3Vyc29yID0gYXNzZXRJbmZvW2ldLmdldEN1
cnNvcigpOwoKCQkJdHJ5IHsKCQkJCUFzc2V0IGFzc2V0ID0gYXNzZXRzLmdldChpKTsKCQkJCUlE
YXRhVXRpbC5wdXQoIGFzc2V0SW5mb0N1cnNvciwgVFlQRSwgYXNzZXQuZ2V0VHlwZSgpLmdldFR5
cGUoKSk7CgkJCQlJRGF0YVV0aWwucHV0KCBhc3NldEluZm9DdXJzb3IsIElELCBhc3NldC5nZXRJ
ZCgpKTsKCQkJCUlEYXRhVXRpbC5wdXQoIGFzc2V0SW5mb0N1cnNvciwgTkFNRSwgYXNzZXQuZ2V0
TmFtZSgpKTsKCQkJCUlEYXRhVXRpbC5wdXQoIGFzc2V0SW5mb0N1cnNvciwgUEFUSCwgYXNzZXQu
Z2V0UGF0aCgpKTsKCQkJCUlEYXRhVXRpbC5wdXQoIGFzc2V0SW5mb0N1cnNvciwgUEFSRU5UX0lE
LCBhc3NldC5nZXRQYXJlbnRJZCgpKTsKCQkJCUlEYXRhVXRpbC5wdXQoIGFzc2V0SW5mb0N1cnNv
ciwgRlVMTF9OQU1FLCBhc3NldC5nZXRGdWxsTmFtZSgpKTsKCgkJCQlpZihjb21wbGV0ZSkgewoJ
CQkJCUlEYXRhVXRpbC5wdXQoIGFzc2V0SW5mb0N1cnNvciwgSEFTX0NISUxEUkVOLCBhc3NldC5o
YXNDaGlsZHJlbigpKTsKCQkJCQlJRGF0YVV0aWwucHV0KCBhc3NldEluZm9DdXJzb3IsIFNUQVRV
UywgYXNzZXQuZ2V0U3RhdHVzKCkpOwoJCQkJfQoKCQkJfSBmaW5hbGx5IHsKCQkJCWFzc2V0SW5m
b0N1cnNvci5kZXN0cm95KCk7CgkJCX0KCQl9Cgl9CgoJcmV0dXJuIGFzc2V0SW5mbzsKfQoKLyoq
CiAqIFdyaXRlIGFsbCB0aGUgYXNzZXRzIGludG8gcGlwZWxpbmUuCiAqIEBwYXJhbSBhc3NldHMg
TGlzdCBvZiBBc3NldHMKICogQHJldHVybgogKi8KcHJpdmF0ZSBzdGF0aWMgSURhdGFbXSB3cml0
ZUFzc2V0SW5mbyhMaXN0PEFzc2V0PiBhc3NldHMpIHsKCglJRGF0YVtdCWFzc2V0SW5mbyA9IG51
bGw7CgoJaWYoYXNzZXRzICE9IG51bGwpIHsKCQlhc3NldEluZm8gPSBuZXcgSURhdGFbYXNzZXRz
LnNpemUoKV07CgoJCWZvciAoIGludCBpID0gMDsgaSA8IGFzc2V0cy5zaXplKCk7IGkrKyApIHsK
CQkJYXNzZXRJbmZvW2ldID0gSURhdGFGYWN0b3J5LmNyZWF0ZSgpOwoJCQlJRGF0YUN1cnNvciBh
c3NldEluZm9DdXJzb3IgPSBhc3NldEluZm9baV0uZ2V0Q3Vyc29yKCk7CgoJCQl0cnkgewoJCQkJ
SURhdGFVdGlsLnB1dCggYXNzZXRJbmZvQ3Vyc29yLCBUWVBFLCBhc3NldHMuZ2V0KGkpLmdldFR5
cGUoKS5nZXRUeXBlKCkpOwoJCQkJSURhdGFVdGlsLnB1dCggYXNzZXRJbmZvQ3Vyc29yLCBJRCwg
YXNzZXRzLmdldChpKS5nZXRJZCgpKTsKCQkJCUlEYXRhVXRpbC5wdXQoIGFzc2V0SW5mb0N1cnNv
ciwgRVhJU1RTLCBhc3NldHMuZ2V0KGkpLmV4aXN0cygpKTsKCgkJCX0gZmluYWxseSB7CgkJCQlh
c3NldEluZm9DdXJzb3IuZGVzdHJveSgpOwoJCQl9CgkJfQoJfQoKCXJldHVybiBhc3NldEluZm87
Cn0KCnByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBTVUNDRVNTRlVMID0gInN1Y2Nlc3NmdWwi
Owpwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgTUVTU0FHRVMgPSAibWVzc2FnZXMiOwpwcml2
YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgQ0hFQ0tQT0lOVF9JRCA9ICJjaGVja3BvaW50SWQiOwpw
cml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgUFJPRFVDVF9OQU1FU1BBQ0UgPSAicHJvZHVjdE5h
bWVzcGFjZSI7CnByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBERVBMT1lNRU5UX0lEID0gImRl
cGxveW1lbnRJZCI7CnByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBBUlRJRkFDVFMgPSAiYXJ0
aWZhY3RzIjsKcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIFNJTVVMQVRFID0gInNpbXVsYXRl
IjsKcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIENPTk5FQ1RJT05fUFJPUEVSVElFUyA9ICJj
b25uZWN0aW9uUHJvcGVydGllcyI7CnByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBLRVkgPSAi
a2V5IjsKcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIFZBTFVFID0gInZhbHVlIjsKcHJpdmF0
ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEFMSUFTID0gImFsaWFzTmFtZSI7CnByaXZhdGUgc3RhdGlj
IGZpbmFsIFN0cmluZyBUWVBFID0gInR5cGUiOwpwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcg
VEVYVCA9ICJ0ZXh0IjsKcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIFRJTUVTVEFNUCA9ICJ0
aW1lc3RhbXAiOwpwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgQ09NUE9TSVRFX05BTUUgPSAi
Y29tcG9zaXRlTmFtZSI7CnByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBDT01QT1NJVEVfVFlQ
RSA9ICJjb21wb3NpdGVUeXBlIjsKcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEFTU0VUX05B
TUUgPSAiYXNzZXROYW1lIjsKcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEFTU0VUX1RZUEUg
PSAiYXNzZXRUeXBlIjsKcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEFDREwgPSAiYWNkbCI7
CnByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBCSU5BUlkgPSAiYmluYXJ5IjsKcHJpdmF0ZSBz
dGF0aWMgZmluYWwgU3RyaW5nIEJST0tFUl9OQU1FU1BBQ0UgPSAiQnJva2VyIjsKcHJpdmF0ZSBz
dGF0aWMgZmluYWwgU3RyaW5nIE5BTUVTUEFDRSA9ICJuYW1lc3BhY2UiOwpwcml2YXRlIHN0YXRp
YyBmaW5hbCBTdHJpbmcgVkVSU0lPTiA9ICJ2ZXJzaW9uIjsKcHJpdmF0ZSBzdGF0aWMgZmluYWwg
U3RyaW5nIElEID0gImlkIjsKcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEFTU0VUX0lORk8g
PSAiYXNzZXRJbmZvIjsKcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIFBST0RVQ1RfREVUQUlM
UyA9ICJwcm9kdWN0RGV0YWlscyI7CnByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBBU1NFVFMg
PSAiYXNzZXRzIjsKcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEFTU0VUX0lERU5USUZJRVJT
ID0gImFzc2V0SWRlbnRpZmllcnMiOwpwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgRVhJU1RT
ID0gImV4aXN0cyI7CnByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBOQU1FID0gIm5hbWUiOwpw
cml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgUEFUSCA9ICJwYXRoIjsKcHJpdmF0ZSBzdGF0aWMg
ZmluYWwgU3RyaW5nIFBBUkVOVF9JRCA9ICJwYXJlbnRJZCI7CnByaXZhdGUgc3RhdGljIGZpbmFs
IFN0cmluZyBGVUxMX05BTUUgPSAiZnVsbE5hbWUiOwpwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJp
bmcgSEFTX0NISUxEUkVOID0gImhhc0NoaWxkcmVuIjsKcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3Ry
aW5nIFNUQVRVUyA9ICJzdGF0dXMiOwpwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgQVNTRVRf
UkVGRVJFTkNFUyA9ICJhc3NldFJlZmVyZW5jZXMiOwoKCgk=</value>
  <value name="encodeutf8">true</value>
  <array name="imports" type="value" depth="1">
    <value>com.wm.util.LocalizedRuntimeException</value>
    <value>com.wm.util.XOPObject</value>
    <value>com.softwareag.deployer.common.persistence.DeliveredArtifact</value>
    <value>com.softwareag.deployer.common.persistence.PersistenceException</value>
    <value>com.softwareag.deployer.common.persistence.PersistenceManager</value>
    <value>com.softwareag.deployer.common.persistence.file.FilePersistenceManager</value>
    <value>java.io.File</value>
    <value>java.io.FileInputStream</value>
    <value>java.io.FileNotFoundException</value>
    <value>java.io.IOException</value>
    <value>java.util.ArrayList</value>
    <value>java.util.Arrays</value>
    <value>java.util.HashMap</value>
    <value>java.util.Iterator</value>
    <value>java.util.List</value>
    <value>java.util.Map</value>
    <value>java.util.Properties</value>
    <value>com.webmethods.deployer.common.acdl.AcdlReportMessage</value>
    <value>com.softwareag.broker.deployer.ACDLResources</value>
    <value>com.softwareag.broker.deployer.CompositeType</value>
    <value>com.softwareag.broker.deployer.DeployerMessage</value>
    <value>com.softwareag.broker.deployer.AssetType</value>
    <value>com.softwareag.broker.deployer.exception.DeployerRuntimeException</value>
    <value>com.softwareag.broker.deployer.trans.impl.Artifact</value>
    <value>com.softwareag.broker.deployer.trans.impl.BrokerDeploymentManager</value>
    <value>com.wm.data.IData</value>
    <value>com.softwareag.broker.deployer.trans.impl.Asset</value>
    <value>com.wm.data.IDataCursor</value>
    <value>com.wm.data.IDataFactory</value>
    <value>com.wm.data.IDataUtil</value>
    <value>com.wm.soap.encoding.ISO8601DateTimeCoder</value>
  </array>
  <value name="extends"></value>
  <array name="implements" type="value" depth="1">
  </array>
</Values>
